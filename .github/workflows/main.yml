name: RDP via ngrok
on:
  workflow_dispatch:

jobs:
  rdp-via-ngrok:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Enable Remote Desktop & Firewall
        run: |
          Write-Host "üîß Enabling RDP and configuring firewall..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
              -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
              -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
              -Name "SecurityLayer" -Value 0 -Force

          # X√≥a rule c≈© (n·∫øu c√≥) v√† m·ªü c·ªïng 3389
          netsh advfirewall firewall delete rule name="RDP-Allow"
          netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force
          Write-Host "‚úÖ RDP enabled and port 3389 opened."

      - name: Create RDP user with random password
        run: |
          Write-Host "üßë‚Äçüíª Creating local RDP user..."
          Add-Type -AssemblyName System.Security
          $chars = ([char[]](33..126)) # full ASCII printable
          $password = -join (Get-Random -Count 12 -InputObject $chars)
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          
          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) {
              Remove-LocalUser -Name "RDP"
          }

          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          echo "RDP_USER=RDP" >> $env:GITHUB_ENV
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

          Write-Host "‚úÖ User 'RDP' created successfully."

      - name: Download and start ngrok tunnel
        run: |
          Write-Host "üåê Setting up ngrok TCP tunnel..."
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip" -OutFile "ngrok.zip"
          Expand-Archive ngrok.zip -DestinationPath "$env:USERPROFILE\ngrok"
          $env:Path += ";$env:USERPROFILE\ngrok"

          # T·∫°o file auth token (Duy c·∫ßn th√™m secret NGROK_AUTH_TOKEN trong repo)
          & "$env:USERPROFILE\ngrok\ngrok.exe" authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

          # Ch·∫°y ngrok TCP tunnel
          Start-Process -FilePath "$env:USERPROFILE\ngrok\ngrok.exe" -ArgumentList "tcp 3389 --log=stdout --log-format=logfmt" -NoNewWindow
          Start-Sleep -Seconds 8

          # L·∫•y public URL c·ªßa tunnel
          $resp = Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels"
          $url = $resp.tunnels[0].public_url
          echo "NGROK_URL=$url" >> $env:GITHUB_ENV
          Write-Host "‚úÖ Ngrok tunnel created: $url"

      - name: Show connection info
        run: |
          Write-Host ""
          Write-Host "=============================="
          Write-Host "üñ•Ô∏è  RDP Connection Details"
          Write-Host "Address : $env:NGROK_URL"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $env:RDP_PASS"
          Write-Host "=============================="
          Write-Host ""
          Write-Host "‚ö†Ô∏è Keep this workflow running to maintain RDP session."
          Write-Host "‚è≥ Runner will stop automatically after 6 hours."
          
          while ($true) {
              Write-Host "[$(Get-Date)] RDP is active..."
              Start-Sleep -Seconds 300
          }
